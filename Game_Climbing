import java.util.ArrayList;
import java.util.Scanner;

public class Game_Climbing
{    
	private boolean played;
	//private ArrayList<Card> pack; // 52 cards

	private Card[] cards;
	//private int cardAmount;
	private Player playA, playB;
	private int scoreA, scoreB;
	private int cardLeft=52;
	//private ArrayList<Card>  computerCards;   


	// An inner class defines what should a player do
	static public abstract class Player
	{
		// Return whether the player need to be dealt
		public abstract boolean needDealt();

		// Get a card from dealer
		public abstract void getDealt(Card aCard);

		// Place a card/ some cards
		public abstract Card placeCard();

		// Store the card on hand
		protected ArrayList<Card> cardsInHand;
	}


	public Game_Climbing()
	{
		played = false;
		scoreA = 0;
		scoreB = 0;
		       
		playA = new Player_Computer();
		playB = new Player_Computer();

		cards=new Card[52];

		for(int i=0;i<52;i+=4){
			for(int j=0;j<4;j++){
				switch(j){
				case 0:
					cards[i+j]=new Card( Card.CardPicture.HEART,i%13+1);
					break;
				case 1:
					cards[i+j]=new Card( Card.CardPicture.CLUB,i%13+1);
					break;
				case 2:
					cards[i+j]=new Card( Card.CardPicture.DIAMOND,i%13+1);
					break;
				case 3:
					cards[i+j]=new Card( Card.CardPicture.SPADE,i%13+1);
					break;
				}
			}	
		}//generate 52 cards

		shuffle();	
	}

	private void shuffle()
	{
		int t;

		Card[] temp=new Card[52];
		for(int i=0;i<52;i++){
			t=(int)(Math.random()*52);

			for(int j=0;j<52;j++){
				if(temp[t]==null){
					temp[t]=new Card(cards[i].getPicture(),cards[i].getNumber());
					break;
				}else{
					t=(t+1)%52;				 
				} 
			}
		}

		for(int i=0;i<52;i++){
			cards[i]=temp[i];
		}
	}

	public void play()
	{
		String playerInput = "";

		// Can only play once
		if(played)
			return;
		played = true;

		int n=0;
		int CardNumberA=0;
		int CardNumberB=0;

		// Deal cards, use first 16 cards
		for(int i = 0; i < 8; i++) // 8 cards per person
		{
			if(playA.needDealt())
			{
				playA.getDealt(cards[n]);
				n++;
				CardNumberA++;
				setCardLeft(getCardLeft() - 1);
			}
			if(playB.needDealt())
			{                       
				playB.getDealt(cards[n]);
				n++;
				CardNumberB++;
				setCardLeft(getCardLeft() - 1);
			}
		}

		// Play games, compare card value
		while(CardNumberA!=0 && CardNumberB!=0)
		{
			Card cardA=playA.placeCard();
			Card cardB=playB.placeCard();

			if(cardA.compareToReturnNumber(cardB)>0)
				scoreA++;
			if(cardA.compareToReturnNumber(cardB)<0)
				scoreB++;
		}


		System.out.println(scoreA > scoreB? "A win!": (scoreA == scoreB? "Draw!": "B win!"));

		System.out.println("continue playing this game（Y/N）？");
		playerInput = extracted().nextLine();

		if(playerInput.equals("N"))
			played = true;
	}

	private Scanner extracted() {
		return new Scanner(System.in);
	}

	public int getCardLeft() {
		return cardLeft;
	}

	public void setCardLeft(int cardLeft) {
		this.cardLeft = cardLeft;
	}

	// Other useful methods


}
